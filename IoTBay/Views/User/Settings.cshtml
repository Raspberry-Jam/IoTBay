@model IoTBay.Models.Views.UserSettingsViewModel

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
}

<h2>Hello, @Model.GivenName</h2>
<h4>You can configure your user settings here</h4>

<div asp-validation-summary="ModelOnly" class="alert alert-warning alert-dismissible fade show">
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

@if (ViewData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @ViewData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<form asp-action="Settings" method="post">
    <h5>Change your password</h5>
    <input asp-for="OldPassword" type="password" placeholder="Old Password"/> <br/>
    <input asp-for="NewPassword" type="password" placeholder="New Password"/> <br/>
    <input asp-for="ConfirmPassword" type="password" placeholder="Confirm New Password"/> <br/>
    <span asp-validation-for="ConfirmPassword" class="text-danger"></span> <br/>

    <h5>Contact Details</h5>
    <input asp-for="Email" type="email" value="@Model.Email" placeholder="Email"/><br/>
    <input asp-for="GivenName" type="text" value="@Model.GivenName" placeholder="Given Name"/><br/>
    <input asp-for="Surname" type="text" value="@Model.Surname" placeholder="Surname"/><br/>
    <input asp-for="PhoneNumber" type="text" value="@Model.PhoneNumber" placeholder="Phone Number"/><br/>

    <h5>Payment Details</h5>
    <p>TODO: Add payment details editing here</p>

    <h5>Shipping Details</h5>
    <p>TODO: Add shipping details editing here</p>

    <h5>Order History</h5>
    <p>TODO: Add order history viewing here</p>
    
    <h5>Access Logs</h5>
    <div class="table-responsive-scrollable">
        <table class="table table-striped table-hover table-bordered">
            <thead class="table-dark">
            <tr>
                <th>Timestamp</th>
                <th>Event Type</th>
            </tr>
            </thead>
            <tbody>
            @if (Model.AccessEvents != null && Model.AccessEvents.Any())
            {
                @foreach (var accessEvent in Model.AccessEvents.OrderByDescending(e => e.EventTime))
                {
                    <tr>
                        <td data-utc-datetime="@accessEvent.EventTime.ToString("o")">@accessEvent.EventTime.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        <td>@accessEvent.EventType.ToString()</td>
                    </tr>
                }                
            }
            </tbody>
        </table>
    </div>

    <input type="hidden" asp-for="UserId" />
    <br/>
    <button type="submit" class="btn btn-primary">Save Changes</button>
</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {  
            const dateTimeCells = document.querySelectorAll('td[data-utc-datetime]');
            
            dateTimeCells.forEach(cell => {
                const utcDateTimeString = cell.getAttribute('data-utc-datetime');
                
                try {
                    const date = new Date(utcDateTimeString);
                    const options = {
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        second: '2-digit',
                        hour12: false,
                        timeZoneName: 'shortOffset'
                    };
                    
                    cell.textContent = new Intl.DateTimeFormat(navigator.language, options).format(date);
                } catch (error) {
                    console.error("Error parsing or formatting date: ", utcDateTimeString, error);
                    cell.textContent = cell.textContent || utcDateTimeString + ' (Error)';
                }
            })
        });
    </script>
}